from fastapi import APIRouter, HTTPException
from models.schemas import IdeaInput, FullFeasibilityReport
from coordinator.workflow import run_full_analysis, synthesize_final_report

router = APIRouter()

@router.post(
    "/validate-idea", 
    response_model=FullFeasibilityReport, 
    response_model_exclude_none=True,
    tags=["Analysis"]
)
async def validate_idea(idea_input: IdeaInput):
    """
    Accepts a startup idea and optional location, returning a full, 
    structured feasibility report generated by a team of AI agents.
    """
    if not idea_input.idea:
        raise HTTPException(status_code=400, detail="Idea text cannot be empty.")

    try:
        # Step 1: Run the full asynchronous orchestration to gather all agent data
        analysis_context = await run_full_analysis(
            idea=idea_input.idea,
            location=idea_input.location.model_dump() if idea_input.location else None
        )
        
        # Step 2: Synthesize the final structured report
        report_json = synthesize_final_report(analysis_context)
        
        if "error" in report_json:
            raise HTTPException(status_code=500, detail=report_json["error"])

        # FastAPI will automatically validate this dictionary against your FullFeasibilityReport schema
        return report_json

    except Exception as e:
        # A final catch-all for any unexpected errors in the workflow
        print(f"A critical error occurred in the main endpoint: {e}")
        raise HTTPException(status_code=500, detail=f"An unexpected server error occurred: {e}")